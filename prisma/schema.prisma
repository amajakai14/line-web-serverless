// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Corporation {
    id           String         @id @default(cuid())
    name         String?
    users        User[]
    tables       Desk[]
    menus        Menu[]
    courses      Course[]
    CourseOnMenu CourseOnMenu[]
}

model User {
    id             String      @id @default(cuid())
    name           String?
    email          String?     @unique
    password       String?
    emailVerified  DateTime?
    image          String?
    role           String?
    accounts       Account[]
    sessions       Session[]
    created_at     DateTime    @default(now())
    corporation    Corporation @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
    corporation_id String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Desk {
    id          Int     @id @default(autoincrement())
    table_name  String
    is_occupied Boolean

    corporation    Corporation @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
    corporation_id String
}

model Menu {
    id             Int            @id @default(autoincrement())
    menu_name      String
    menu_type      String
    price          Int            @default(0)
    available      Boolean        @default(true)
    created_at     DateTime       @default(now())
    updated_at     DateTime?
    corporation    Corporation    @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
    corporation_id String
    course_on_menu CourseOnMenu[]
}

model CourseOnMenu {
    course         Course      @relation(fields: [course_id], references: [id], onDelete: Cascade)
    course_id      Int
    menu           Menu        @relation(fields: [menu_id], references: [id], onDelete: Cascade)
    menu_id        Int
    corporation    Corporation @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
    corporation_id String

    @@id([course_id, menu_id])
}

model Course {
    id               Int            @id @default(autoincrement())
    course_name      String
    course_price     Int
    course_timelimit Int?           @default(90)
    course_priority  Int?
    created_at       DateTime       @default(now())
    updated_at       DateTime?
    corporation      Corporation    @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
    corporation_id   String
    course_on_menu   CourseOnMenu[]
}

//ONLINE EXPIRED
model Channel {
    id          String   @id @unique
    table_id    Int
    user_id     Int
    course_name String
    status      String
    time_start  DateTime @default(now())
    time_end    DateTime
    orders      Order[]

    @@unique([user_id, table_id])
}

model Order {
    id           Int       @id @default(autoincrement())
    menu_id      String
    order_amount Int
    total_price  Int
    process_type String
    created_at   DateTime  @default(now())
    updated_at   DateTime?
    channels     Channel   @relation(fields: [channel_id], references: [id], onDelete: Cascade)
    channel_id   String
}
